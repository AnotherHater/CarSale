name: Tag and Release

on:
  push:
    branches:
      - master

jobs:
  tag-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch tags
        run: git fetch --tags

      - name: Get latest tag
        id: get-latest-tag
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
          if [ -z "$latest_tag" ]; then
            echo "latest_tag=v0.0.0" >> $GITHUB_ENV
          else
            echo "latest_tag=$latest_tag" >> $GITHUB_ENV
          fi

      - name: Calculate new tag
        id: calculate-new-tag
        run: |
          latest_tag=${{ env.latest_tag }}
          if [ "$latest_tag" == "v0.0.0" ]; then
            new_tag="v0.0.1"
          else
            IFS='.' read -r -a parts <<< "${latest_tag:1}"
            major=${parts[0]}
            minor=${parts[1]}
            patch=${parts[2]}

            if [ $patch -eq 9 ]; then
              patch=0
              minor=$((minor + 1))
            else
              patch=$((patch + 1))
            fi

            new_tag="v${major}.${minor}.${patch}"
          fi
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Create new tag
        run: |
          new_tag=${{ env.new_tag }}
          git tag $new_tag
          git push origin $new_tag

      - name: Get commits since last tag
        id: get-commits
        run: |
          latest_tag=${{ env.latest_tag }}
          if [ "$latest_tag" == "v0.0.0" ]; then
            git log --pretty=format:"* %s" --reverse
          else
            git log --pretty=format:"* %s" $latest_tag..HEAD --reverse
          fi
        env:
          LATEST_TAG: ${{ env.latest_tag }}

      - name: Generate release body
        id: generate-release-body
        run: |
          echo "## What's Changed" > release_body.txt
          echo "${{ steps.get-commits.outputs.stdout }}" >> release_body.txt
          echo "" >> release_body.txt
          echo "**Full Changelog**: https://github.com/your_username/your_repo/compare/${{ env.latest_tag }}...${{ env.new_tag }}" >> release_body.txt
          echo "::set-output name=release_body::$(cat release_body.txt)"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}
          release_name: ${{ env.new_tag }}
          body: ${{ steps.generate-release-body.outputs.release_body }}
          draft: false
          prerelease: false
